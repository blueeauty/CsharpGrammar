Compilation Process:
1、Transformation:	a particular character and encoding scheme =>	a sequence of Unicode Characters
2、Lexical analysis:	a stream of Unicode input characters =>		a stream of tokens
3、Syntactic analysis:	the stream of tokens =>	executable code

Lexical grammar and Syntactic grammar

Five basic elements make up the lexical structure of a C# compilation unit:
1、Line terminators
2、White space
3、Comment
4、Tokens
5、Pre-processing directives

The Lexical processing of a C# compilation unit consists of reducing the file into a sequence of tokens that becomes the input to the syntactic analysis
Line terminators,white space,and comments can serve to separate tokens,and pre-processing directives can cause sections of the compilation unit to be skipped,
but otherwise these lexical elements have no impact on the syntactic structure of a C# program

Line terminators divide the characters of a C# compilation unit into lines
Two forms of comments are supported: delimited comments and single-line comments
White space is defined as any character with Unicode class Zs(which includes the space character)as well as the horizontal tab character,the vertical tab character,and the form feed character

There are several kinds of tokens:identifiers,keywords,literals,operator,and punctuator.

Note that since Unicode escapes are not permitted in keywords,the token "cl\u0061ss" is an identifier,and is the same identifier as "@class"

The rules keyword and contextual_keyword are parser rules as they do not introduce new token kinds.ALl keywords and contextual keywords are defined by implicit lexical rules as the occur as literal strings int the grammar

Integer literals are used to write values of types int,uint,long,and ulong. Integer literals have three possible forms:decimal,hexadecimal,and binary
If the literal has no suffix,it has the first of these types in which its value can be represented: int,uint,long,ulong.(trailing is allowed to interpolate in the middle of literal)
1_2_3_4

Real literals are used to write values of types float,double,and decimal.
A character literal represents a single character,and consists of a character in quotes,as in 'a'.
Note: A character that follows a backslash character(\) in a Character must be one of the following characters:',",\,0,a,b,f,n,r,t,u,U,x,v.Otherwisr,a compile-time error occurs.
In particular,simple escape sequences,and hexadecimal and Unicode escape sequences are not processed in verbatim string literals.(prefix @ show no escape character)

Each string literal does not necessarily result in a new string instance.When two or more string literals that are equivalent according to the string equality operator appear in the same assembly,
these string literals refer to the same string instance.
A null_literal represents a null value.It does not have a type,but can be converted to any reference type or nullable value type through a null literal conversion.

Conditional compilation directives can nest.

Line directives may be used to alter the line numbers and compilation unit names that are reported by the compiler in output such as warnings and errors.These values are also used by caller-info attributes

The #pragma preprocessing directive is used to specify contextual information to a compiler.

Chapter 7  Basic concepts
A program compilied as an application shall contain at least one method qualifying as an entry point by satisfying the following requirements:
1、It shall have the name Main
2、It shall be static
3、It shall not be generic
4、It shall be declared in a non-generic type.If the type declaring the method is a nested type,none of its enclosing types may be generic.
5、It may have the async modifier provided the method's return type is System.Threading.Tasks.Task or System.Threading.Tasks.Task<int>.
6、The return type shall be void,int,System.Threading.Tasks.Task,or System.Threading.Tasks.Task<int>.
7、It shall not be a partial method without an implementation.
8、The parameter list shall either be empty,or have a single value parameter of type string[].

On systems supporting a command line,applicaiton parameters correspond to what are generally known as command-line arguments.
Application termination returns control to the execution environment.

If the return type of the application's effective entry point method is int and execution completes without resulting in an exception,
the value of the int returned serves as the application's termination status code.
The purpose of this code is to allow communication of success or failure to the execution environment.
If the return type of the effective entry point method is void and execution completes without resulting in an exception,the termination status code is 0.

The .NET Framework implementation makes every reasonable effort to call finalizers for all of its objects that have not yet been garbage collected,unless such cleanup has been suppressed
(by a call to the library method GC.SuppressFinalize)


